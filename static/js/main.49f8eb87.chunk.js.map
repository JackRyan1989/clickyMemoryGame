{"version":3,"sources":["components/CardDisp.js","App.js","serviceWorker.js","index.js"],"names":["CardDisp","props","className","Card","style","width","Image","onClick","score","variant","src","image","id","App","handleClick","event","target","state","clickedArr","includes","determineLoss","setState","push","alert","highScore","images","sortedArr","this","sort","Math","random","Navbar","href","Jumbotron","fluid","Row","Container","sm","map","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0kEAgBeA,MAVf,SAAkBC,GACd,OACI,yBAAKC,UAAU,WACX,kBAACC,EAAA,EAAD,CAAMD,UAAU,wBAAwBE,MAAO,CAAEC,MAAO,UAChD,kBAACC,EAAA,EAAD,CAAOJ,UAAU,eAAeK,QAASN,EAAMO,MAAOC,QAAQ,MAAMC,IAAKT,EAAMU,MAAOC,GAAIX,EAAMW,Q,+BCwErGC,G,kBAvEb,WAAYZ,GAAQ,IAAD,8BACjB,4CAAMA,KAURa,YAAc,SAACC,GAAW,IAChBH,EAAOG,EAAMC,OAAbJ,GAEJ,EAAKK,MAAMC,WAAWC,SAASP,GACjC,EAAKQ,gBAEL,EAAKC,SAAS,CACZb,MAAO,EAAKS,MAAMT,MAAQ,IAI9B,EAAKS,MAAMC,WAAWI,KAAKV,IAtBV,EA0BnBQ,cAAgB,WACdG,MAAM,sCAAD,OAAuC,EAAKN,MAAMT,MAAlD,cACL,EAAKa,SAAS,CACZG,UAAW,EAAKP,MAAMT,MACtBA,MAAO,EACPU,WAAY,MA7Bd,EAAKD,MAAQ,CACXQ,SACAjB,MAAO,EACPgB,UAAW,EACXN,WAAY,IANG,E,sEAmCT,IAAD,OAEDQ,EAAYC,KAAKV,MAAMQ,OAAOG,MAAK,kBAAMC,KAAKC,SAAW,MAC/D,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQ7B,UAAU,yDACZ,wBAAIA,UAAU,mBAAd,eAA6CyB,KAAKV,MAAMT,MAAxD,kBAA8EmB,KAAKV,MAAMO,WACzF,uBAAGtB,UAAU,sBAAqB,uBAAGA,UAAU,yBAAyB8B,KAAK,oDAA3C,uBAExC,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAAChC,UAAU,gCACzB,kBAACiC,EAAA,EAAD,CAAKjC,UAAU,QACf,kBAACiC,EAAA,EAAD,CAAKjC,UAAU,QACf,wBAAIA,UAAU,OAAd,8BACA,wBAAIA,UAAU,OAAd,uEACA,kBAACiC,EAAA,EAAD,CAAKjC,UAAU,QACf,kBAACiC,EAAA,EAAD,CAAKjC,UAAU,SAEjB,kBAACkC,EAAA,EAAD,CAAWC,GAAI,IACb,kBAACF,EAAA,EAAD,KACKT,EAAUY,KAAI,SAAA3B,GAAK,OAClB,kBAAC,EAAD,CACET,UAAU,aACVqC,IAAK5B,EAAMC,GACXA,GAAID,EAAMC,GACVD,MAAOA,EAAMA,MACbH,MAAO,EAAKM,wB,GA7DZ0B,IAAMC,YCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.49f8eb87.chunk.js","sourcesContent":["import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Image from 'react-bootstrap/Image';\nimport './cardDisp.css';\n\n\nfunction CardDisp(props) {\n    return (\n        <div className=\"mx-auto\">\n            <Card className='p-2 m-2 border-0 card' style={{ width: '18rem' }}>\n                    <Image className=\"card-img-top\" onClick={props.score} variant='top' src={props.image} id={props.id} />\n            </Card>\n        </div>\n    )\n}\n\nexport default CardDisp;\n","import React from 'react';\nimport images from './images.json';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport CardDisp from \"../src/components/CardDisp\";\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Navbar from 'react-bootstrap/Navbar';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      images,\n      score: 0,\n      highScore: 0,\n      clickedArr: []\n    }\n  }\n\n  //Counter function for score & change clicked state to true\n  handleClick = (event) => {\n    const { id } = event.target\n    //Determine if the id exists in the array first:\n    if (this.state.clickedArr.includes(id)) {\n      this.determineLoss()\n    } else {\n      this.setState({\n        score: this.state.score + 1\n      });\n    }\n    //Then push the id to the array:\n    this.state.clickedArr.push(id);\n  }\n\n  //Determine a loss condition\n  determineLoss = () => {\n    alert(`You lose! Good job though, you got ${this.state.score} correct!`);\n    this.setState({\n      highScore: this.state.score,\n      score: 0,\n      clickedArr: []\n    })\n  }\n\n  render() {\n    //Marginally randomize the images:\n    const sortedArr = this.state.images.sort(() => Math.random() - 0.5);\n    return (\n      <div>\n        <Navbar className='navbar fixed-top my-2 my-lg-0 justify-content-between'>\n              <h4 className=\"text-center p-2\">Your Score: {this.state.score} | High Score: {this.state.highScore}</h4>\n              <p className='navbar-nav ml-auto'><a className=\"text-white navbar-text\" href=\"https://github.com/JackRyan1989/clickyMemoryGame\">Made by Jack Ryan</a></p>\n        </Navbar>\n        <Jumbotron fluid className='text-center jumbo text-white'>\n          <Row className='m-5'></Row>\n          <Row className='m-5'></Row>\n          <h1 className='m-5'>Ren and Stimpy Memory Game</h1>\n          <h2 className='m-2'>Keep clicking to get points, just don't click the same thing twice!</h2>\n          <Row className='m-5'></Row>\n          <Row className='m-5'></Row>\n        </Jumbotron>\n        <Container sm={12}>\n          <Row>\n              {sortedArr.map(image => (\n                <CardDisp\n                  className=\"float-left\"\n                  key={image.id}\n                  id={image.id}\n                  image={image.image}\n                  score={this.handleClick}\n                />\n              ))}\n          </Row>\n        </Container>\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}